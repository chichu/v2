
需要安装如下perl模块：
 Data::Dumper
 Encode::CN
 File::Path
 HTML::Entities
 IO::Handle
 IO::Socket
 Socket
 List::Uti
 Tie::RefHash

parser配置文件说明

一、综述
配置文件用于描述定向抓站的行为, 由parser.pl进行解析。配置文件分成两个部分：站点配置文件和模板定义文件，全部采用utf-8编码。

1. 站点配置文件(cfg)

	[配置名] 
	encoding=站点编码(utf-8、gbk)
	template=模板名
	可选参数名=参数值


说明

encoding:
默认为gbk/gb2312就不用设置, 否则根据实际情况设置为相应编码如:utf-8等
template:
调用模板定义文件中的对应模板
可选参数名:
模板可以定义一系列参数

2. 模板定义文件(ypl)

	%%
	name: 模板名
	args: [参数[, 参数]]
	节点名: [修饰词[,修饰词]]{动作}
		[[正则表达式
			[正则表达式]]
				- 后续节点]
	%%

说明

%%:
	用于分隔每一个模板定义
args:
	采用替换的机制,该模板其余部分的 <% 参数名 %> 将会被替换成cfg文件中提供的参数值	
节点名:
	字母加数字组成，模板的起始节点规定为start
动作:
	写在{}内的一段perl语句,不包括{}
修饰词:
	url	把动作执行的结果当作url来下载，可以是一个http开头的URI，也可以是一个wget/curl命令。如果是URI，则相对url都会自动转换成绝对url。如果是命令，则不会对其进行任何更改，用户需要保证其正确性。
	uniq	对url进行排重

二、如何编写模板定义文件

1. 定义起始节点
	将起始页的url填在start节点的动作部分,并给予一个url描述。 由于动作使用的是perl语句的语法，你可以在其中使用变量和调用函数，对于需要多个起始页的情况，你有两种办法：让动作返回一个perl中的列表，这适用起始页较少的情况；调用next系列的预定义函数，每次会返回一个不同的值，并能使parser再次调用起始节点,典型的应用是喂词搜索
	起始节点甚至也可以不是一个url节点,例如可以是一列整数，而在后续节点中根据其中的每一个数去生成url

2. 利用正则表达式
	在一个节点的正则表达式中用()括起来的匹配结果可以被后续节点引用, 匹配结果依次存入到一个数组中，该数组的引用存入到以节点名命名的perl标量中，如果有多个后续节点，则对每个后续节点来说，数组中只存有当前路径中的匹配结果，举例来说
	start: url{"http://somedomain.com/list.asp"}
		/href="(.*?)"/g
			- finalpage
		/total\s+\(d+)\s+pages/
			/onclick="gotopage\((\d+)\)/
				- nextpage
	上面的例子中start有两个后续节点finalpage和nextpage，当页面内容匹配了一个超链接时，在finalpage的动作中可以用$start->[0]来引用超链接的网址，我们可以理解为start节点的第0次匹配。
	对于nextpage，我们看到，正则表达式允许串联，这样我们可以方便的用正则表达式来做更复杂的控制，本例中，我们可以用$start->[0]来取得"total 100 pages"中的页数，用$start->[1]来取得onclick="gotopage(2)"中的页码。注意，不同后续节点中$start->[0]的值是不一样的。
	还有一种方式可以用来引用匹配结果：$pre_match变量中保存了上一个节点的正则表达式的匹配结果。$pre_match适用于一个节点同时是多个节点的后续节点的情形。

3. 定义后续节点
	后续节点的定义同起始节点类似，不同的是后续节点可以引用正则表达式的匹配结果及前一节点的其他数据

4. 利用一些预定义变量和函数、节点
	预定义的变量有
	$pre_match
		上一次匹配结果的数组引用,需要引用匹配结果时应优先使用此变量
	$pre_ret
		为上一个节点的动作返回值,如果加上了url修饰, 则为取回的页面内容
	$pre_url
		上一个节点所用的url(仅含有http://...)

	预定义的节点有
	std_save
		执行标准的保存动作(存网页内容及把url和文件名写入一个index文件中)

	预定义的函数均在USER.pm中
	today() 返回今天的日期
	now() 返回现在的时间(精确到分钟)
	confname()	返回配置名
	save(file, str)	用于自定义的保存，向file写入str，file应为相对目录
	append(file, str) 同上，附加str到文件file
	std_save 系统标准的保存方式，同时保存下载的网页和索引，由预定义的节点std_save调用，一般不需手工调用
	nextline(file, circle) 	返回file的下一行内容, circle表示是否循环,默认值是1，传入0表示不循环
	urlencode(str) 	用于url的组成部分的编码(它会将非字母及数字的所有字符进行编码)，函数返回编码后的串
	urlencode2(str)	用于整个url的编码(仅编码0x80-0xff的字符)
	trim(list)	输入一个列表，对列表中每一个元素去除HTML标签、解码entities、去除前后空白、连续的空白转换为单个空格，返回这个列表
	formdata(html,baseurl,formname,args...)	用于表单提交，返回组织好的可供直接post的串。html是整个网页的内容,通常可以通过$pre_ret来获取,因为如果上一个节点是一个url的话，它会返回url的内容。baseurl是url地址，可以通过$pre_url来取得。formname可参见页面中的name属性值。args是成对的name/value值，用来表示对表单中的哪些值进行修改。

5. 利用模板参数编写公用模板
	模板参数使用简单的宏替换的机制，当你发现许多站点的模板除了url与正则表达式不同，其他都一样时，就可以把相同的部分用<% arg %>来替代，从而简化维护工作

三、 如何扩展
可以在USER.pm中增加函数

四、 示例
